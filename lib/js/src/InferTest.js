// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ast = require("./Ast.js");
var Type = require("./Type.js");
var Infer = require("./Infer.js");
var TypeEnv = require("./TypeEnv.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function test(name, ast, expected) {
  try {
    var typ = Infer.infer(ast, TypeEnv.empty(undefined));
    var correct = expected === Type.toString(typ);
    console.log("  " + (
          correct ? "" : name
        ) + " " + (
          correct ? "" : ":"
        ) + " " + (
          correct ? "" : Type.toString(typ)
        ));
    console.log((
          correct ? " " : "x"
        ) + " " + name + " : " + Type.toString(typ));
    console.log("  " + name + " : " + Ast.exprToString(ast));
    return ;
  }
  catch (raw_exn){
    var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
    if (exn.RE_EXN_ID === Infer.$$TypeError) {
      console.log("type error");
      return ;
    }
    throw exn;
  }
}

function run(param) {
  test("1", {
        TAG: /* Lambda */1,
        _0: "f",
        _1: {
          TAG: /* Lambda */1,
          _0: "x",
          _1: {
            TAG: /* FnCall */2,
            _0: {
              TAG: /* Identifier */0,
              _0: "f"
            },
            _1: {
              TAG: /* Identifier */0,
              _0: "x"
            }
          }
        }
      }, "(a -> b) -> a -> b");
  test("2", {
        TAG: /* Lambda */1,
        _0: "f",
        _1: {
          TAG: /* Lambda */1,
          _0: "x",
          _1: {
            TAG: /* FnCall */2,
            _0: {
              TAG: /* Identifier */0,
              _0: "f"
            },
            _1: {
              TAG: /* FnCall */2,
              _0: {
                TAG: /* Identifier */0,
                _0: "f"
              },
              _1: {
                TAG: /* Identifier */0,
                _0: "x"
              }
            }
          }
        }
      }, "(a -> a) -> a -> a");
  test("(+)", {
        TAG: /* Lambda */1,
        _0: "m",
        _1: {
          TAG: /* Lambda */1,
          _0: "n",
          _1: {
            TAG: /* Lambda */1,
            _0: "f",
            _1: {
              TAG: /* Lambda */1,
              _0: "x",
              _1: {
                TAG: /* FnCall */2,
                _0: {
                  TAG: /* FnCall */2,
                  _0: {
                    TAG: /* Identifier */0,
                    _0: "m"
                  },
                  _1: {
                    TAG: /* Identifier */0,
                    _0: "f"
                  }
                },
                _1: {
                  TAG: /* FnCall */2,
                  _0: {
                    TAG: /* FnCall */2,
                    _0: {
                      TAG: /* Identifier */0,
                      _0: "n"
                    },
                    _1: {
                      TAG: /* Identifier */0,
                      _0: "f"
                    }
                  },
                  _1: {
                    TAG: /* Identifier */0,
                    _0: "x"
                  }
                }
              }
            }
          }
        }
      }, "(a -> b -> c) -> (a -> d -> b) -> a -> d -> c");
  test("succ", {
        TAG: /* Lambda */1,
        _0: "n",
        _1: {
          TAG: /* Lambda */1,
          _0: "f",
          _1: {
            TAG: /* Lambda */1,
            _0: "x",
            _1: {
              TAG: /* FnCall */2,
              _0: {
                TAG: /* Identifier */0,
                _0: "f"
              },
              _1: {
                TAG: /* FnCall */2,
                _0: {
                  TAG: /* FnCall */2,
                  _0: {
                    TAG: /* Identifier */0,
                    _0: "n"
                  },
                  _1: {
                    TAG: /* Identifier */0,
                    _0: "f"
                  }
                },
                _1: {
                  TAG: /* Identifier */0,
                  _0: "x"
                }
              }
            }
          }
        }
      }, "((a -> b) -> c -> a) -> (a -> b) -> c -> b");
  test("mult", {
        TAG: /* Lambda */1,
        _0: "m",
        _1: {
          TAG: /* Lambda */1,
          _0: "n",
          _1: {
            TAG: /* Lambda */1,
            _0: "f",
            _1: {
              TAG: /* Lambda */1,
              _0: "x",
              _1: {
                TAG: /* FnCall */2,
                _0: {
                  TAG: /* FnCall */2,
                  _0: {
                    TAG: /* Identifier */0,
                    _0: "m"
                  },
                  _1: {
                    TAG: /* FnCall */2,
                    _0: {
                      TAG: /* Identifier */0,
                      _0: "n"
                    },
                    _1: {
                      TAG: /* Identifier */0,
                      _0: "f"
                    }
                  }
                },
                _1: {
                  TAG: /* Identifier */0,
                  _0: "x"
                }
              }
            }
          }
        }
      }, "(a -> b -> c) -> (d -> a) -> d -> b -> c");
  test("pred", {
        TAG: /* Lambda */1,
        _0: "n",
        _1: {
          TAG: /* Lambda */1,
          _0: "f",
          _1: {
            TAG: /* Lambda */1,
            _0: "x",
            _1: {
              TAG: /* FnCall */2,
              _0: {
                TAG: /* FnCall */2,
                _0: {
                  TAG: /* FnCall */2,
                  _0: {
                    TAG: /* Identifier */0,
                    _0: "n"
                  },
                  _1: {
                    TAG: /* Lambda */1,
                    _0: "g",
                    _1: {
                      TAG: /* Lambda */1,
                      _0: "h",
                      _1: {
                        TAG: /* FnCall */2,
                        _0: {
                          TAG: /* Identifier */0,
                          _0: "h"
                        },
                        _1: {
                          TAG: /* FnCall */2,
                          _0: {
                            TAG: /* Identifier */0,
                            _0: "g"
                          },
                          _1: {
                            TAG: /* Identifier */0,
                            _0: "f"
                          }
                        }
                      }
                    }
                  }
                },
                _1: {
                  TAG: /* Lambda */1,
                  _0: "u",
                  _1: {
                    TAG: /* Identifier */0,
                    _0: "x"
                  }
                }
              },
              _1: {
                TAG: /* Lambda */1,
                _0: "u",
                _1: {
                  TAG: /* Identifier */0,
                  _0: "u"
                }
              }
            }
          }
        }
      }, "(((a -> b) -> (b -> c) -> c) -> (d -> e) -> (f -> f) -> g) -> a -> e -> g");
  test("let1", {
        TAG: /* Lambda */1,
        _0: "x",
        _1: {
          TAG: /* Let */3,
          _0: "y",
          _1: {
            TAG: /* Identifier */0,
            _0: "x"
          },
          _2: {
            TAG: /* Identifier */0,
            _0: "y"
          }
        }
      }, "a -> a");
  return test("let2", {
              TAG: /* Lambda */1,
              _0: "x",
              _1: {
                TAG: /* Let */3,
                _0: "y",
                _1: {
                  TAG: /* Lambda */1,
                  _0: "z",
                  _1: {
                    TAG: /* Identifier */0,
                    _0: "x"
                  }
                },
                _2: {
                  TAG: /* Identifier */0,
                  _0: "y"
                }
              }
            }, "a -> b -> a");
}

exports.test = test;
exports.run = run;
/* No side effect */
