// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Ast = require("./Ast.js");
var Type = require("./Type.js");
var Infer = require("./Infer.js");
var Parser = require("./Parser.js");
var Readline = require("./Readline.js");
var Tokenizer = require("./Tokenizer.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function run(param) {
  var readline = Readline.make(undefined);
  var loop = function (param) {
    return Readline.question(readline, "> ", (function (input) {
                  if (input === ".exit") {
                    console.log("ðŸ‘‹");
                    return Readline.close(readline);
                  }
                  var errors = Tokenizer.parse(input);
                  if (errors.TAG === /* Ok */0) {
                    var errors$1 = Parser.parse(input, errors._0);
                    if (errors$1.TAG === /* Ok */0) {
                      var ast = errors$1._0;
                      try {
                        Type.print(Infer.infer(ast));
                      }
                      catch (raw_exn){
                        var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                        if (exn.RE_EXN_ID === Infer.$$TypeError) {
                          console.log("type error");
                        } else if (exn.RE_EXN_ID === "Not_found") {
                          console.log("variable not found");
                        } else {
                          throw exn;
                        }
                      }
                      console.log(Ast.exprToString(ast.value));
                    } else {
                      Belt_Array.forEach(errors$1._0, (function (error) {
                              console.log(error.message);
                              
                            }));
                    }
                  } else {
                    Belt_Array.forEach(errors._0, (function (error) {
                            console.log(error.message);
                            
                          }));
                  }
                  return loop(undefined);
                }));
  };
  return loop(undefined);
}

exports.run = run;
/* Readline Not a pure module */
