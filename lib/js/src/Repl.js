// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Type = require("./Type.js");
var Infer = require("./Infer.js");
var Parser = require("./Parser.js");
var TypeEnv = require("./TypeEnv.js");
var Readline = require("./Readline.js");
var Caml_js_exceptions = require("rescript/lib/js/caml_js_exceptions.js");

function run(param) {
  var readline = Readline.make(undefined);
  var loop = function (param) {
    return Readline.question(readline, "> ", (function (input) {
                  if (input === ".exit") {
                    console.log("ðŸ‘‹");
                    return Readline.close(readline);
                  }
                  try {
                    Type.print(Infer.infer(Parser.parse(input), TypeEnv.empty(undefined)));
                  }
                  catch (raw__s){
                    var _s = Caml_js_exceptions.internalToOCamlException(raw__s);
                    if (_s.RE_EXN_ID === Infer.$$TypeError) {
                      console.log("type error");
                    } else if (_s.RE_EXN_ID === "Not_found") {
                      console.log("variable not found");
                    } else if (_s.RE_EXN_ID === "Failure") {
                      console.log("lexing failure, invalid symbol");
                    } else {
                      throw _s;
                    }
                  }
                  return loop(undefined);
                }));
  };
  return loop(undefined);
}

exports.run = run;
/* Parser Not a pure module */
