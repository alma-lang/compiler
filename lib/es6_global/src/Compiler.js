// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "./Ast.js";
import * as Type from "./Type.js";
import * as Infer from "./Infer.js";
import * as Parser from "./Parser.js";
import * as Tokenizer from "./Tokenizer.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";

function compile(input) {
  var errors = Tokenizer.parse(input);
  if (errors.TAG !== /* Ok */0) {
    return {
            TAG: 1,
            _0: Belt_Array.joinWith(errors._0, "\n\n", (function (error) {
                    return error.message;
                  })),
            [Symbol.for("name")]: "Error"
          };
  }
  var errors$1 = Parser.parse(input, errors._0);
  if (errors$1.TAG !== /* Ok */0) {
    return {
            TAG: 1,
            _0: Belt_Array.joinWith(errors$1._0, "\n\n", (function (error) {
                    return error.message;
                  })),
            [Symbol.for("name")]: "Error"
          };
  }
  var ast = errors$1._0;
  var typ = Infer.infer(ast);
  if (typ.TAG === /* Ok */0) {
    return {
            TAG: 0,
            _0: Type.toString(typ._0) + "\n" + Ast.Expression.toString(ast.value),
            [Symbol.for("name")]: "Ok"
          };
  } else {
    return {
            TAG: 1,
            _0: Infer.InferError.toStringMany(typ._0, input),
            [Symbol.for("name")]: "Error"
          };
  }
}

export {
  compile ,
  
}
/* Tokenizer Not a pure module */
