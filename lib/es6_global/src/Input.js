// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "../../../node_modules/rescript/lib/es6/belt_Option.js";

var newLine = "\n";

function lineSubstring(input, from, to_) {
  return input.substring(from, to_ === (input.length - 1 | 0) && input.charAt(to_) !== newLine ? to_ + 1 | 0 : to_);
}

function lineAt(input, position) {
  if (input.length === 0 || position < 0 || position >= input.length) {
    return ;
  }
  var position$1 = position;
  var $$break = false;
  while(!$$break) {
    var prevPosition = position$1 - 1 | 0;
    if (prevPosition < 0 || input.charAt(prevPosition) === newLine) {
      $$break = true;
    } else {
      position$1 = prevPosition;
    }
  };
  var start = position$1;
  var position$2 = position;
  var $$break$1 = false;
  while(!$$break$1) {
    var nextPosition = position$2 + 1 | 0;
    if (nextPosition >= input.length || input.charAt(position$2) === newLine) {
      $$break$1 = true;
    } else {
      position$2 = nextPosition;
    }
  };
  var end = position$2;
  return [
          start,
          end
        ];
}

function linesBeforePosition(input, lines, _position, _howManyLines) {
  while(true) {
    var howManyLines = _howManyLines;
    var position = _position;
    var match = lineAt(input, position);
    if (match === undefined) {
      return lines.reverse();
    }
    if (howManyLines <= 0) {
      return lines.reverse();
    }
    var lineStart = match[0];
    var line = lineSubstring(input, lineStart, match[1]);
    lines.push(line);
    _howManyLines = howManyLines - 1 | 0;
    _position = lineStart - 1 | 0;
    continue ;
  };
}

function linesAfterPosition(input, lines, _position, _howManyLines) {
  while(true) {
    var howManyLines = _howManyLines;
    var position = _position;
    var match = lineAt(input, position);
    if (match === undefined) {
      return lines;
    }
    if (howManyLines <= 0) {
      return lines;
    }
    var lineEnd = match[1];
    var line = lineSubstring(input, match[0], lineEnd);
    lines.push(line);
    _howManyLines = howManyLines - 1 | 0;
    _position = lineEnd + 1 | 0;
    continue ;
  };
}

function linesAroundPosition(input, position, numberOfLines) {
  return Belt_Option.flatMap(lineAt(input, position), (function (param) {
                var lineEnd = param[1];
                var lineStart = param[0];
                var line = lineSubstring(input, lineStart, lineEnd);
                var linesBefore = linesBeforePosition(input, [], lineStart - 1 | 0, numberOfLines);
                var linesAfter = linesAfterPosition(input, [], lineEnd + 1 | 0, numberOfLines);
                return [
                        linesBefore,
                        line,
                        linesAfter
                      ];
              }));
}

function linesReportAtPositionWithPointer(input, position, lineNumber, columnNumber) {
  return Belt_Option.flatMap(linesAroundPosition(input, position, 2), (function (param) {
                var linesAfter = param[2];
                var linesBefore = param[0];
                var out = [];
                var lineNumberWidth = String(lineNumber + linesAfter.length | 0).length;
                Belt_Array.forEachWithIndex(linesBefore, (function (i, l) {
                        var ln = String((lineNumber - linesBefore.length | 0) + i | 0).padStart(lineNumberWidth, " ");
                        out.push("  " + ln + "│ " + l);
                        
                      }));
                var ln = String(lineNumber).padStart(lineNumberWidth, " ");
                out.push("  " + ln + "│ " + param[1]);
                var lineNumberAsSpaces = " ".padStart(lineNumberWidth, " ");
                out.push("  " + lineNumberAsSpaces + "│ " + " ".repeat(columnNumber) + "↑");
                Belt_Array.forEachWithIndex(linesAfter, (function (i, l) {
                        var ln = String((lineNumber + 1 | 0) + i | 0).padStart(lineNumberWidth, " ");
                        out.push("  " + ln + "│ " + l);
                        
                      }));
                return out.join("\n");
              }));
}

var $$String$1;

var JsArray;

export {
  $$String$1 as $$String,
  JsArray ,
  newLine ,
  lineSubstring ,
  lineAt ,
  linesBeforePosition ,
  linesAfterPosition ,
  linesAroundPosition ,
  linesReportAtPositionWithPointer ,
  
}
/* No side effect */
