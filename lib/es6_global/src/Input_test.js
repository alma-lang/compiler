// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Json from "./Json.js";
import * as Test from "./Test.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Input from "./Input.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as AssertsTs from "https://deno.land/std@0.97.0/testing/asserts.ts";

Test.suite("Input", (function (param) {
        var test = param.test;
        var source1 = "line1\nline2\nline3\n\nline5\nline6";
        var testCases = [
          [
            source1,
            2,
            undefined,
            1,
            "  1│  line1\n   │    ↑\n  2│  line2\n  3│  line3"
          ],
          [
            source1,
            12,
            undefined,
            3,
            "  1│  line1\n  2│  line2\n  3│  line3\n   │  ↑\n  4│  \n  5│  line5"
          ],
          [
            source1,
            18,
            undefined,
            4,
            "  2│  line2\n  3│  line3\n  4│  \n   │  ↑\n  5│  line5\n  6│  line6"
          ],
          [
            source1,
            source1.length - 1 | 0,
            undefined,
            6,
            "  4│  \n  5│  line5\n  6│  line6\n   │      ↑"
          ],
          [
            source1,
            source1.length - 1 | 0,
            undefined,
            6,
            "  4│  \n  5│  line5\n  6│  line6\n   │      ↑"
          ],
          [
            source1,
            source1.length,
            undefined,
            6,
            "  4│  \n  5│  line5\n  6│  line6\n   │       ↑"
          ],
          [
            source1,
            0,
            4,
            1,
            "  1│  line1\n   │  ↑↑↑↑\n  2│  line2\n  3│  line3"
          ],
          [
            source1,
            6,
            11,
            2,
            "  1│  line1\n  2│  line2\n   │  ↑↑↑↑↑\n  3│  line3\n  4│  "
          ],
          [
            source1,
            7,
            15,
            2,
            "  1│  line1\n  2│→ line2\n  3│→ line3\n  4│  \n  5│  line5"
          ],
          [
            source1,
            7,
            source1.length,
            2,
            "  1│  line1\n  2│→ line2\n  3│→ line3\n  4│→ \n  5│→ line5\n  6│→ line6"
          ]
        ];
        return Belt_Array.forEachWithIndex(testCases, (function (i, param) {
                      var expected = param[4];
                      var lineNumber = param[3];
                      var end = param[2];
                      var position = param[1];
                      var input = param[0];
                      var firstLine = Belt_Array.getExn(Belt_Array.keep(input.split("\n"), (function (s) {
                                  return s.length !== 0;
                                })), 0);
                      var subject = "p" + position + ":l" + lineNumber + ":c" + end + ":" + firstLine;
                      return Curry._2(test, "" + i + ". \"" + subject + "\"", (function (param) {
                                    var actual = Input.linesReportAtPositionWithPointer(position, lineNumber, end, input);
                                    if (!AssertsTs.equal(actual, expected)) {
                                      console.log("\n", Json.stringifyAnyWithSpace(actual, 4));
                                      console.log("\n", input);
                                    }
                                    AssertsTs.assertEquals(actual, expected, "");
                                    
                                  }));
                    }));
      }));

export {
  
}
/*  Not a pure module */
