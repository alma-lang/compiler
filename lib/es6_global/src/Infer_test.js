// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "./Ast.js";
import * as Json from "./Json.js";
import * as Test from "./Test.js";
import * as Type from "./Type.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Infer from "./Infer.js";
import * as Parser from "./Parser.js";
import * as Tokenizer from "./Tokenizer.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_js_exceptions from "../../../node_modules/rescript/lib/es6/caml_js_exceptions.js";
import * as AssertsTs from "https://deno.land/std@0.97.0/testing/asserts.ts";

Test.suite("Infer", (function (param) {
        var test = param.test;
        var testCases = [
          [
            "\\f -> \\x -> f x",
            "(a -> b) -> a -> b"
          ],
          [
            "\\f -> \\x -> f (f x)",
            "(a -> a) -> a -> a"
          ],
          [
            "\\m -> \\n -> \\f -> \\x -> m f (n f x)",
            "(a -> b -> c) -> (a -> d -> b) -> a -> d -> c"
          ],
          [
            "\\n -> \\f -> \\x -> f (n f x)",
            "((a -> b) -> c -> a) -> (a -> b) -> c -> b"
          ],
          [
            "\\m -> \\n -> \\f -> \\x -> m (n f) x",
            "(a -> b -> c) -> (d -> a) -> d -> b -> c"
          ],
          [
            "\\n -> \\f -> \\x -> n (\\g -> \\h -> h (g f)) (\\u -> x) (\\u -> u)",
            "(((a -> b) -> (b -> c) -> c) -> (d -> e) -> (f -> f) -> g) -> a -> e -> g"
          ]
        ];
        return Belt_Array.forEachWithIndex(testCases, (function (i, param) {
                      var expected = param[1];
                      var input = param[0];
                      return Curry._2(test, "" + i, (function (param) {
                                    var tokens = Tokenizer.parse(input);
                                    if (tokens.TAG === /* Ok */0) {
                                      var ast = Parser.parse(input, tokens._0);
                                      if (ast.TAG === /* Ok */0) {
                                        var ast$1 = ast._0;
                                        try {
                                          var typ = Infer.infer(ast$1);
                                          var typStr = Type.toString(typ);
                                          var astStr = Ast.Expression.toString(ast$1.value);
                                          if (!AssertsTs.equal(typStr, expected)) {
                                            console.log("\n", Json.stringifyAnyWithSpace(typ, 4));
                                            console.log("\n", Json.stringifyAnyWithSpace(ast$1, 4));
                                            console.log("\n\n", Json.stringifyAnyWithSpace(typStr, 4));
                                            console.log("\n", Json.stringifyAnyWithSpace(astStr, 4));
                                          }
                                          AssertsTs.assertEquals(typStr, expected, "");
                                          return ;
                                        }
                                        catch (raw_exn){
                                          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                                          if (exn.RE_EXN_ID === Infer.$$TypeError) {
                                            AssertsTs.assertEquals("type error", expected, "");
                                            return ;
                                          }
                                          throw exn;
                                        }
                                      } else {
                                        var ss = Belt_Array.map(ast._0, (function (a) {
                                                return a.message;
                                              }));
                                        ss.splice(0, 0, "Error parsing test input");
                                        AssertsTs.fail(ss.join("\n\n"));
                                        return ;
                                      }
                                    } else {
                                      var ss$1 = Belt_Array.map(tokens._0, (function (a) {
                                              return a.message;
                                            }));
                                      ss$1.splice(0, 0, "Error tokenizing test input");
                                      AssertsTs.fail(ss$1.join("\n\n"));
                                      return ;
                                    }
                                  }));
                    }));
      }));

export {
  
}
/*  Not a pure module */
