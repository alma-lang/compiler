// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "./Test.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Tokenizer from "./Tokenizer.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as AssertsTs from "https://deno.land/std@0.97.0/testing/asserts.ts";

Test.suite("Tokenizer", (function (param) {
        var test = param.test;
        var testCases = [
          [
            "",
            {
              TAG: 0,
              _0: [{
                  kind: /* Eof */38,
                  lexeme: "[End of file]",
                  position: -1,
                  line: 1,
                  column: 0,
                  indent: 0
                }],
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123",
            {
              TAG: 0,
              _0: [
                {
                  kind: /* Number */22,
                  lexeme: "123",
                  position: 0,
                  line: 1,
                  column: 0,
                  indent: 0
                },
                {
                  kind: /* Eof */38,
                  lexeme: "[End of file]",
                  position: 2,
                  line: 1,
                  column: 3,
                  indent: 0
                }
              ],
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123.345",
            {
              TAG: 0,
              _0: [
                {
                  kind: /* Number */22,
                  lexeme: "123.345",
                  position: 0,
                  line: 1,
                  column: 0,
                  indent: 0
                },
                {
                  kind: /* Eof */38,
                  lexeme: "[End of file]",
                  position: 6,
                  line: 1,
                  column: 7,
                  indent: 0
                }
              ],
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123.sd",
            {
              TAG: 1,
              _0: [{
                  line: 1,
                  column: 3,
                  message: "1:3\nExpected more digits after a dot in a number.\n  1│ 123.sd\n   │    ↑"
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "123\n or \"abc\"",
            {
              TAG: 0,
              _0: [
                {
                  kind: /* Number */22,
                  lexeme: "123",
                  position: 0,
                  line: 1,
                  column: 0,
                  indent: 0
                },
                {
                  kind: /* Or */24,
                  lexeme: "or",
                  position: 5,
                  line: 2,
                  column: 1,
                  indent: 1
                },
                {
                  kind: /* String */21,
                  lexeme: "\"abc\"",
                  position: 8,
                  line: 2,
                  column: 4,
                  indent: 1
                },
                {
                  kind: /* Eof */38,
                  lexeme: "[End of file]",
                  position: 12,
                  line: 2,
                  column: 9,
                  indent: 1
                }
              ],
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123\n or &\"abc\"",
            {
              TAG: 1,
              _0: [{
                  line: 2,
                  column: 4,
                  message: "2:4\nUnexpected character '&'.\n  1│ 123\n  2│  or &\"abc\"\n   │     ↑"
                }],
              [Symbol.for("name")]: "Error"
            }
          ]
        ];
        return Belt_Array.forEachWithIndex(testCases, (function (i, param) {
                      var expected = param[1];
                      var input = param[0];
                      return Curry._2(test, "test " + i, (function (param) {
                                    AssertsTs.assertEquals(Tokenizer.parse(input), expected, "");
                                    
                                  }));
                    }));
      }));

export {
  
}
/*  Not a pure module */
