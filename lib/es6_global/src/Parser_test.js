// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "./Ast.js";
import * as Json from "./Json.js";
import * as Test from "./Test.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Parser from "./Parser.js";
import * as Tokenizer from "./Tokenizer.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as AssertsTs from "https://deno.land/std@0.97.0/testing/asserts.ts";

Test.suite("Parser", (function (param) {
        var test = param.test;
        var testCases = [
          [
            "()",
            {
              TAG: 0,
              _0: {
                value: /* Unit */0,
                line: 1,
                column: 0,
                start: 0,
                end: 2
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 123.0,
                  [Symbol.for("name")]: "Float"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123.2",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 123.2,
                  [Symbol.for("name")]: "Float"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 5
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "true",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 0,
                  _0: true,
                  [Symbol.for("name")]: "Bool"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 4
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "false",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 0,
                  _0: false,
                  [Symbol.for("name")]: "Bool"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 5
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "variableOne",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 3,
                  _0: "variableOne",
                  [Symbol.for("name")]: "Identifier"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 11
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "variable_one",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 3,
                  _0: "variable_one",
                  [Symbol.for("name")]: "Identifier"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 12
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "espaÃ†Ã Ê¥Ã±Ã‘ol",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 3,
                  _0: "espaÃ†Ã Ê¥Ã±Ã‘ol",
                  [Symbol.for("name")]: "Identifier"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 11
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\"ðŸ˜„\"",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "ðŸ˜„",
                  [Symbol.for("name")]: "String"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 4
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\"\n\"",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "\n",
                  [Symbol.for("name")]: "String"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\"\"",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "",
                  [Symbol.for("name")]: "String"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 2
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "(\"\")",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "",
                  [Symbol.for("name")]: "String"
                },
                line: 1,
                column: 1,
                start: 1,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "(((1)))",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 1.0,
                  [Symbol.for("name")]: "Float"
                },
                line: 1,
                column: 3,
                start: 3,
                end: 4
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "(((1))",
            {
              TAG: 1,
              _0: [{
                  message: "1:6: Expected ')' after parenthesized expression, but instead found: '[End of file]'\n\n  1â”‚ (((1))\n   â”‚ â†‘",
                  token: {
                    kind: /* Eof */39,
                    lexeme: "[End of file]",
                    position: 5,
                    line: 1,
                    column: 6,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "(((1))))",
            {
              TAG: 1,
              _0: [{
                  message: "1:7: Expected the end of input, but instead found: ')'\n\n  1â”‚ (((1))))\n   â”‚        â†‘",
                  token: {
                    kind: /* RightParen */1,
                    lexeme: ")",
                    position: 7,
                    line: 1,
                    column: 7,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "(\n  ((1))\n)",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 1.0,
                  [Symbol.for("name")]: "Float"
                },
                line: 2,
                column: 4,
                start: 6,
                end: 7
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "fun arg",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "fun",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 3
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 7
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 7
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "fun\n arg",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "fun",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 3
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 2,
                    column: 1,
                    start: 5,
                    end: 8
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 8
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "  fun\n    arg",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "fun",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 2,
                    start: 2,
                    end: 5
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 2,
                    column: 4,
                    start: 10,
                    end: 13
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                line: 1,
                column: 2,
                start: 2,
                end: 13
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "fun\narg",
            {
              TAG: 1,
              _0: [{
                  message: "2:0: Expected the end of input, but instead found: 'arg'\n\n  1â”‚ fun\n  2â”‚ arg\n   â”‚ â†‘",
                  token: {
                    kind: /* Identifier */22,
                    lexeme: "arg",
                    position: 4,
                    line: 2,
                    column: 0,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "\nfun arg1\n  arg2 arg3\n  arg4",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 7,
                      _0: {
                        value: {
                          TAG: 7,
                          _0: {
                            value: {
                              TAG: 7,
                              _0: {
                                value: {
                                  TAG: 3,
                                  _0: "fun",
                                  [Symbol.for("name")]: "Identifier"
                                },
                                line: 2,
                                column: 0,
                                start: 1,
                                end: 4
                              },
                              _1: {
                                value: {
                                  TAG: 3,
                                  _0: "arg1",
                                  [Symbol.for("name")]: "Identifier"
                                },
                                line: 2,
                                column: 4,
                                start: 5,
                                end: 9
                              },
                              [Symbol.for("name")]: "FnCall"
                            },
                            line: 2,
                            column: 0,
                            start: 1,
                            end: 9
                          },
                          _1: {
                            value: {
                              TAG: 3,
                              _0: "arg2",
                              [Symbol.for("name")]: "Identifier"
                            },
                            line: 3,
                            column: 2,
                            start: 12,
                            end: 16
                          },
                          [Symbol.for("name")]: "FnCall"
                        },
                        line: 2,
                        column: 0,
                        start: 1,
                        end: 16
                      },
                      _1: {
                        value: {
                          TAG: 3,
                          _0: "arg3",
                          [Symbol.for("name")]: "Identifier"
                        },
                        line: 3,
                        column: 7,
                        start: 17,
                        end: 21
                      },
                      [Symbol.for("name")]: "FnCall"
                    },
                    line: 2,
                    column: 0,
                    start: 1,
                    end: 21
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg4",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 4,
                    column: 2,
                    start: 24,
                    end: 28
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                line: 2,
                column: 0,
                start: 1,
                end: 28
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "not false",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 4,
                  _0: {
                    value: /* Not */0,
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 3
                  },
                  _1: {
                    value: {
                      TAG: 0,
                      _0: false,
                      [Symbol.for("name")]: "Bool"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 9
                  },
                  [Symbol.for("name")]: "Unary"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 9
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "- 5",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 4,
                  _0: {
                    value: /* Minus */1,
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 1
                  },
                  _1: {
                    value: {
                      TAG: 1,
                      _0: 5,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 2,
                    start: 2,
                    end: 3
                  },
                  [Symbol.for("name")]: "Unary"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "incr (-5)",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "incr",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 4
                  },
                  _1: {
                    value: {
                      TAG: 4,
                      _0: {
                        value: /* Minus */1,
                        line: 1,
                        column: 6,
                        start: 6,
                        end: 7
                      },
                      _1: {
                        value: {
                          TAG: 1,
                          _0: 5,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 7,
                        start: 7,
                        end: 8
                      },
                      [Symbol.for("name")]: "Unary"
                    },
                    line: 1,
                    column: 6,
                    start: 6,
                    end: 8
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 8
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "1 - 5",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 5,
                  _0: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 1
                  },
                  _1: {
                    value: Ast.Binop.substraction,
                    line: 1,
                    column: 2,
                    start: 2,
                    end: 3
                  },
                  _2: {
                    value: {
                      TAG: 1,
                      _0: 5,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 5
                  },
                  [Symbol.for("name")]: "Binary"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 5
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "1 - -5",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 5,
                  _0: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 1
                  },
                  _1: {
                    value: Ast.Binop.substraction,
                    line: 1,
                    column: 2,
                    start: 2,
                    end: 3
                  },
                  _2: {
                    value: {
                      TAG: 4,
                      _0: {
                        value: /* Minus */1,
                        line: 1,
                        column: 4,
                        start: 4,
                        end: 5
                      },
                      _1: {
                        value: {
                          TAG: 1,
                          _0: 5,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 5,
                        start: 5,
                        end: 6
                      },
                      [Symbol.for("name")]: "Unary"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 6
                  },
                  [Symbol.for("name")]: "Binary"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 6
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "1 + 2 / 3",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 5,
                  _0: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 1
                  },
                  _1: {
                    value: {
                      typ: /* Addition */8,
                      precedence: 14,
                      associativity: /* LTR */0,
                      fn: "(+)"
                    },
                    line: 1,
                    column: 2,
                    start: 2,
                    end: 3
                  },
                  _2: {
                    value: {
                      TAG: 5,
                      _0: {
                        value: {
                          TAG: 1,
                          _0: 2,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 4,
                        start: 4,
                        end: 5
                      },
                      _1: {
                        value: {
                          typ: /* Division */11,
                          precedence: 15,
                          associativity: /* LTR */0,
                          fn: "(/)"
                        },
                        line: 1,
                        column: 6,
                        start: 6,
                        end: 7
                      },
                      _2: {
                        value: {
                          TAG: 1,
                          _0: 3,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 8,
                        start: 8,
                        end: 9
                      },
                      [Symbol.for("name")]: "Binary"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 9
                  },
                  [Symbol.for("name")]: "Binary"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 9
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "1 == 2 / 3",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 5,
                  _0: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 1
                  },
                  _1: {
                    value: {
                      typ: /* Equal */2,
                      precedence: 11,
                      associativity: /* LTR */0,
                      fn: "(==)"
                    },
                    line: 1,
                    column: 2,
                    start: 2,
                    end: 4
                  },
                  _2: {
                    value: {
                      TAG: 5,
                      _0: {
                        value: {
                          TAG: 1,
                          _0: 2,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 5,
                        start: 5,
                        end: 6
                      },
                      _1: {
                        value: {
                          typ: /* Division */11,
                          precedence: 15,
                          associativity: /* LTR */0,
                          fn: "(/)"
                        },
                        line: 1,
                        column: 7,
                        start: 7,
                        end: 8
                      },
                      _2: {
                        value: {
                          TAG: 1,
                          _0: 3,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 9,
                        start: 9,
                        end: 10
                      },
                      [Symbol.for("name")]: "Binary"
                    },
                    line: 1,
                    column: 5,
                    start: 5,
                    end: 10
                  },
                  [Symbol.for("name")]: "Binary"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 10
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\\a -> a",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 6,
                  _0: [{
                      value: {
                        _0: "a",
                        [Symbol.for("name")]: "Identifier"
                      },
                      line: 1,
                      column: 1,
                      start: 1,
                      end: 2
                    }],
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "a",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 6,
                    start: 6,
                    end: 7
                  },
                  [Symbol.for("name")]: "Lambda"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 7
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\\a -> \\b -> a",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 6,
                  _0: [{
                      value: {
                        _0: "a",
                        [Symbol.for("name")]: "Identifier"
                      },
                      line: 1,
                      column: 1,
                      start: 1,
                      end: 2
                    }],
                  _1: {
                    value: {
                      TAG: 6,
                      _0: [{
                          value: {
                            _0: "b",
                            [Symbol.for("name")]: "Identifier"
                          },
                          line: 1,
                          column: 7,
                          start: 7,
                          end: 8
                        }],
                      _1: {
                        value: {
                          TAG: 3,
                          _0: "a",
                          [Symbol.for("name")]: "Identifier"
                        },
                        line: 1,
                        column: 12,
                        start: 12,
                        end: 13
                      },
                      [Symbol.for("name")]: "Lambda"
                    },
                    line: 1,
                    column: 6,
                    start: 6,
                    end: 13
                  },
                  [Symbol.for("name")]: "Lambda"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 13
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\\a b -> a",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 6,
                  _0: [
                    {
                      value: {
                        _0: "a",
                        [Symbol.for("name")]: "Identifier"
                      },
                      line: 1,
                      column: 1,
                      start: 1,
                      end: 2
                    },
                    {
                      value: {
                        _0: "b",
                        [Symbol.for("name")]: "Identifier"
                      },
                      line: 1,
                      column: 3,
                      start: 3,
                      end: 4
                    }
                  ],
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "a",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 8,
                    start: 8,
                    end: 9
                  },
                  [Symbol.for("name")]: "Lambda"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 9
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "if true then 1 else 2",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 9,
                  _0: {
                    value: {
                      TAG: 0,
                      _0: true,
                      [Symbol.for("name")]: "Bool"
                    },
                    line: 1,
                    column: 3,
                    start: 3,
                    end: 7
                  },
                  _1: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 13,
                    start: 13,
                    end: 14
                  },
                  _2: {
                    value: {
                      TAG: 1,
                      _0: 2,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 20,
                    start: 20,
                    end: 21
                  },
                  [Symbol.for("name")]: "If"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 21
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\nif true then\n  1\n\nelse\n  2",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 9,
                  _0: {
                    value: {
                      TAG: 0,
                      _0: true,
                      [Symbol.for("name")]: "Bool"
                    },
                    line: 2,
                    column: 3,
                    start: 4,
                    end: 8
                  },
                  _1: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 3,
                    column: 2,
                    start: 16,
                    end: 17
                  },
                  _2: {
                    value: {
                      TAG: 1,
                      _0: 2,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 6,
                    column: 2,
                    start: 26,
                    end: 27
                  },
                  [Symbol.for("name")]: "If"
                },
                line: 2,
                column: 0,
                start: 1,
                end: 27
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "if true then incr 1 else 2",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 9,
                  _0: {
                    value: {
                      TAG: 0,
                      _0: true,
                      [Symbol.for("name")]: "Bool"
                    },
                    line: 1,
                    column: 3,
                    start: 3,
                    end: 7
                  },
                  _1: {
                    value: {
                      TAG: 7,
                      _0: {
                        value: {
                          TAG: 3,
                          _0: "incr",
                          [Symbol.for("name")]: "Identifier"
                        },
                        line: 1,
                        column: 13,
                        start: 13,
                        end: 17
                      },
                      _1: {
                        value: {
                          TAG: 1,
                          _0: 1,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 18,
                        start: 18,
                        end: 19
                      },
                      [Symbol.for("name")]: "FnCall"
                    },
                    line: 1,
                    column: 13,
                    start: 13,
                    end: 19
                  },
                  _2: {
                    value: {
                      TAG: 1,
                      _0: 2,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 25,
                    start: 25,
                    end: 26
                  },
                  [Symbol.for("name")]: "If"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 26
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "if true then if false then 1 else 3 else 2",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 9,
                  _0: {
                    value: {
                      TAG: 0,
                      _0: true,
                      [Symbol.for("name")]: "Bool"
                    },
                    line: 1,
                    column: 3,
                    start: 3,
                    end: 7
                  },
                  _1: {
                    value: {
                      TAG: 9,
                      _0: {
                        value: {
                          TAG: 0,
                          _0: false,
                          [Symbol.for("name")]: "Bool"
                        },
                        line: 1,
                        column: 16,
                        start: 16,
                        end: 21
                      },
                      _1: {
                        value: {
                          TAG: 1,
                          _0: 1,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 27,
                        start: 27,
                        end: 28
                      },
                      _2: {
                        value: {
                          TAG: 1,
                          _0: 3,
                          [Symbol.for("name")]: "Float"
                        },
                        line: 1,
                        column: 34,
                        start: 34,
                        end: 35
                      },
                      [Symbol.for("name")]: "If"
                    },
                    line: 1,
                    column: 13,
                    start: 13,
                    end: 35
                  },
                  _2: {
                    value: {
                      TAG: 1,
                      _0: 2,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 41,
                    start: 41,
                    end: 42
                  },
                  [Symbol.for("name")]: "If"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 42
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "if true { 1 } else 2",
            {
              TAG: 1,
              _0: [{
                  message: "1:8: Expected the keyword `then` and an expression to parse the if expression, but instead found: '{'\n\n  1â”‚ if true { 1 } else 2\n   â”‚         â†‘",
                  token: {
                    kind: /* LeftBrace */2,
                    lexeme: "{",
                    position: 8,
                    line: 1,
                    column: 8,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "if true then 1",
            {
              TAG: 1,
              _0: [{
                  message: "1:14: Expected the `else` branch of the if expression, but instead found: '[End of file]'\n\n  1â”‚ if true then 1\n   â”‚               â†‘",
                  token: {
                    kind: /* Eof */39,
                    lexeme: "[End of file]",
                    position: 13,
                    line: 1,
                    column: 14,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "let x = 1\nx",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 8,
                  _0: {
                    value: {
                      _0: "x",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 5
                  },
                  _1: {
                    value: {
                      TAG: 1,
                      _0: 1,
                      [Symbol.for("name")]: "Float"
                    },
                    line: 1,
                    column: 8,
                    start: 8,
                    end: 9
                  },
                  _2: {
                    value: {
                      TAG: 3,
                      _0: "x",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 2,
                    column: 0,
                    start: 10,
                    end: 11
                  },
                  [Symbol.for("name")]: "Let"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 11
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "let x = a\n  x",
            {
              TAG: 1,
              _0: [{
                  message: "2:3: Expected the let definition to be followed by another let or expression in the next line and same indentation, but instead found: '[End of file]'\n\n  1â”‚ let x = a\n  2â”‚   x\n   â”‚    â†‘",
                  token: {
                    kind: /* Eof */39,
                    lexeme: "[End of file]",
                    position: 12,
                    line: 2,
                    column: 3,
                    indent: 2
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "let x = a\n  x\nx",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 8,
                  _0: {
                    value: {
                      _0: "x",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 4,
                    start: 4,
                    end: 5
                  },
                  _1: {
                    value: {
                      TAG: 7,
                      _0: {
                        value: {
                          TAG: 3,
                          _0: "a",
                          [Symbol.for("name")]: "Identifier"
                        },
                        line: 1,
                        column: 8,
                        start: 8,
                        end: 9
                      },
                      _1: {
                        value: {
                          TAG: 3,
                          _0: "x",
                          [Symbol.for("name")]: "Identifier"
                        },
                        line: 2,
                        column: 2,
                        start: 12,
                        end: 13
                      },
                      [Symbol.for("name")]: "FnCall"
                    },
                    line: 1,
                    column: 8,
                    start: 8,
                    end: 13
                  },
                  _2: {
                    value: {
                      TAG: 3,
                      _0: "x",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 3,
                    column: 0,
                    start: 14,
                    end: 15
                  },
                  [Symbol.for("name")]: "Let"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 15
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "hello ()",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "hello",
                      [Symbol.for("name")]: "Identifier"
                    },
                    line: 1,
                    column: 0,
                    start: 0,
                    end: 5
                  },
                  _1: {
                    value: /* Unit */0,
                    line: 1,
                    column: 6,
                    start: 6,
                    end: 8
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                line: 1,
                column: 0,
                start: 0,
                end: 8
              },
              [Symbol.for("name")]: "Ok"
            }
          ]
        ];
        return Belt_Array.forEachWithIndex(testCases, (function (i, param) {
                      var expected = param[1];
                      var input = param[0];
                      var subject = Belt_Array.getExn(Belt_Array.keep(input.split("\n"), (function (s) {
                                  return s.length !== 0;
                                })), 0);
                      return Curry._2(test, "" + i + ". \"" + subject + "\"", (function (param) {
                                    var tokens = Tokenizer.parse(input);
                                    if (tokens.TAG === /* Ok */0) {
                                      var actual = Parser.parse(input, tokens._0);
                                      if (!AssertsTs.equal(actual, expected)) {
                                        console.log("\n", Json.stringifyAnyWithSpace(actual, 4));
                                        console.log("\n", input);
                                      }
                                      AssertsTs.assertEquals(actual, expected, "");
                                      return ;
                                    }
                                    var ss = Belt_Array.map(tokens._0, (function (a) {
                                            return a.message;
                                          }));
                                    ss.splice(0, 0, "Error tokenizing test input");
                                    AssertsTs.fail(ss.join("\n\n"));
                                    
                                  }));
                    }));
      }));

export {
  
}
/*  Not a pure module */
