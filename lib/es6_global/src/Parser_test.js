// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Json from "./Json.js";
import * as Test from "./Test.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Parser from "./Parser.js";
import * as Tokenizer from "./Tokenizer.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as AssertsTs from "https://deno.land/std@0.97.0/testing/asserts.ts";

Test.suite("Parser", (function (param) {
        var test = param.test;
        var testCases = [
          [
            "123",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 123.0,
                  [Symbol.for("name")]: "Float"
                },
                start: 0,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "123.2",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 123.2,
                  [Symbol.for("name")]: "Float"
                },
                start: 0,
                end: 5
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "true",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 0,
                  _0: true,
                  [Symbol.for("name")]: "Bool"
                },
                start: 0,
                end: 4
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "false",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 0,
                  _0: false,
                  [Symbol.for("name")]: "Bool"
                },
                start: 0,
                end: 5
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "variableOne",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 3,
                  _0: "variableOne",
                  [Symbol.for("name")]: "Identifier"
                },
                start: 0,
                end: 11
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "variable_one",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 3,
                  _0: "variable_one",
                  [Symbol.for("name")]: "Identifier"
                },
                start: 0,
                end: 12
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "espaÃ†Ã Ê¥Ã±Ã‘ol",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 3,
                  _0: "espaÃ†Ã Ê¥Ã±Ã‘ol",
                  [Symbol.for("name")]: "Identifier"
                },
                start: 0,
                end: 11
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\"ðŸ˜„\"",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "ðŸ˜„",
                  [Symbol.for("name")]: "String"
                },
                start: 0,
                end: 4
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\"\n\"",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "\n",
                  [Symbol.for("name")]: "String"
                },
                start: 0,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "\"\"",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "",
                  [Symbol.for("name")]: "String"
                },
                start: 0,
                end: 2
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "(\"\")",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 2,
                  _0: "",
                  [Symbol.for("name")]: "String"
                },
                start: 1,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "(((1)))",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 1.0,
                  [Symbol.for("name")]: "Float"
                },
                start: 3,
                end: 4
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "(((1))",
            {
              TAG: 1,
              _0: [{
                  message: "1:6: Expected ')' after parenthesized expression, but instead found: '[End of file]'\n\n  1â”‚ (((1))\n   â”‚ â†‘",
                  token: {
                    kind: /* Eof */38,
                    lexeme: "[End of file]",
                    position: 5,
                    line: 1,
                    column: 6,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "(((1))))",
            {
              TAG: 1,
              _0: [{
                  message: "1:7: Expected the end of input, but instead found: ')'\n\n  1â”‚ (((1))))\n   â”‚        â†‘",
                  token: {
                    kind: /* RightParen */1,
                    lexeme: ")",
                    position: 7,
                    line: 1,
                    column: 7,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "(\n  ((1))\n)",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 1,
                  _0: 1.0,
                  [Symbol.for("name")]: "Float"
                },
                start: 6,
                end: 7
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "fun arg",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "fun",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 0,
                    end: 3
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 4,
                    end: 7
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                start: 0,
                end: 7
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "fun\n arg",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "fun",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 0,
                    end: 3
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 5,
                    end: 8
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                start: 0,
                end: 8
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "  fun\n    arg",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "fun",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 2,
                    end: 5
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 10,
                    end: 13
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                start: 2,
                end: 13
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "fun\narg",
            {
              TAG: 1,
              _0: [{
                  message: "2:0: Expected the end of input, but instead found: 'arg'\n\n  1â”‚ fun\n  2â”‚ arg\n   â”‚ â†‘",
                  token: {
                    kind: /* Identifier */20,
                    lexeme: "arg",
                    position: 4,
                    line: 2,
                    column: 0,
                    indent: 0
                  }
                }],
              [Symbol.for("name")]: "Error"
            }
          ],
          [
            "\nfun arg1\n  arg2 arg3\n  arg4",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 7,
                      _0: {
                        value: {
                          TAG: 7,
                          _0: {
                            value: {
                              TAG: 7,
                              _0: {
                                value: {
                                  TAG: 3,
                                  _0: "fun",
                                  [Symbol.for("name")]: "Identifier"
                                },
                                start: 1,
                                end: 4
                              },
                              _1: {
                                value: {
                                  TAG: 3,
                                  _0: "arg1",
                                  [Symbol.for("name")]: "Identifier"
                                },
                                start: 5,
                                end: 9
                              },
                              [Symbol.for("name")]: "FnCall"
                            },
                            start: 1,
                            end: 9
                          },
                          _1: {
                            value: {
                              TAG: 3,
                              _0: "arg2",
                              [Symbol.for("name")]: "Identifier"
                            },
                            start: 12,
                            end: 16
                          },
                          [Symbol.for("name")]: "FnCall"
                        },
                        start: 1,
                        end: 16
                      },
                      _1: {
                        value: {
                          TAG: 3,
                          _0: "arg3",
                          [Symbol.for("name")]: "Identifier"
                        },
                        start: 17,
                        end: 21
                      },
                      [Symbol.for("name")]: "FnCall"
                    },
                    start: 1,
                    end: 21
                  },
                  _1: {
                    value: {
                      TAG: 3,
                      _0: "arg4",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 24,
                    end: 28
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                start: 1,
                end: 28
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "not false",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 4,
                  _0: {
                    value: /* Not */0,
                    start: 0,
                    end: 3
                  },
                  _1: {
                    value: {
                      TAG: 0,
                      _0: false,
                      [Symbol.for("name")]: "Bool"
                    },
                    start: 4,
                    end: 9
                  },
                  [Symbol.for("name")]: "Unary"
                },
                start: 0,
                end: 9
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "- 5",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 4,
                  _0: {
                    value: /* Minus */1,
                    start: 0,
                    end: 1
                  },
                  _1: {
                    value: {
                      TAG: 1,
                      _0: 5,
                      [Symbol.for("name")]: "Float"
                    },
                    start: 2,
                    end: 3
                  },
                  [Symbol.for("name")]: "Unary"
                },
                start: 0,
                end: 3
              },
              [Symbol.for("name")]: "Ok"
            }
          ],
          [
            "incr (-5)",
            {
              TAG: 0,
              _0: {
                value: {
                  TAG: 7,
                  _0: {
                    value: {
                      TAG: 3,
                      _0: "incr",
                      [Symbol.for("name")]: "Identifier"
                    },
                    start: 0,
                    end: 4
                  },
                  _1: {
                    value: {
                      TAG: 4,
                      _0: {
                        value: /* Minus */1,
                        start: 6,
                        end: 7
                      },
                      _1: {
                        value: {
                          TAG: 1,
                          _0: 5,
                          [Symbol.for("name")]: "Float"
                        },
                        start: 7,
                        end: 8
                      },
                      [Symbol.for("name")]: "Unary"
                    },
                    start: 6,
                    end: 8
                  },
                  [Symbol.for("name")]: "FnCall"
                },
                start: 0,
                end: 8
              },
              [Symbol.for("name")]: "Ok"
            }
          ]
        ];
        return Belt_Array.forEachWithIndex(testCases, (function (i, param) {
                      var expected = param[1];
                      var input = param[0];
                      return Curry._2(test, "" + i, (function (param) {
                                    var tokens = Tokenizer.parse(input);
                                    if (tokens.TAG === /* Ok */0) {
                                      var actual = Parser.parse(input, tokens._0);
                                      if (!AssertsTs.equal(actual, expected)) {
                                        console.log("\n", Json.stringifyAnyWithSpace(actual, 4));
                                      }
                                      AssertsTs.assertEquals(actual, expected, "");
                                      return ;
                                    }
                                    var ss = Belt_Array.map(tokens._0, (function (a) {
                                            return a.message;
                                          }));
                                    ss.splice(0, 0, "Error tokenizing test input");
                                    AssertsTs.fail(ss.join("\n\n"));
                                    
                                  }));
                    }));
      }));

export {
  
}
/*  Not a pure module */
