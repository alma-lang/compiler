// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Type from "./Type.js";
import * as Curry from "../../../node_modules/rescript/lib/es6/curry.js";
import * as Belt_MapString from "../../../node_modules/rescript/lib/es6/belt_MapString.js";
import * as Caml_exceptions from "../../../node_modules/rescript/lib/es6/caml_exceptions.js";

var Not_found = /* @__PURE__ */Caml_exceptions.create("TypeEnv.Not_found");

function empty(typeVar, generalize) {
  var a = Curry._1(typeVar, undefined);
  var a$1 = Curry._1(typeVar, undefined);
  return Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(Belt_MapString.set(undefined, "(or)", {
                                                          TAG: 2,
                                                          _0: Type.bool_,
                                                          _1: {
                                                            TAG: 2,
                                                            _0: Type.bool_,
                                                            _1: Type.bool_,
                                                            [Symbol.for("name")]: "Fn"
                                                          },
                                                          [Symbol.for("name")]: "Fn"
                                                        }), "(and)", {
                                                      TAG: 2,
                                                      _0: Type.bool_,
                                                      _1: {
                                                        TAG: 2,
                                                        _0: Type.bool_,
                                                        _1: Type.bool_,
                                                        [Symbol.for("name")]: "Fn"
                                                      },
                                                      [Symbol.for("name")]: "Fn"
                                                    }), "(==)", Curry._1(generalize, {
                                                      TAG: 2,
                                                      _0: a,
                                                      _1: {
                                                        TAG: 2,
                                                        _0: a,
                                                        _1: Type.bool_,
                                                        [Symbol.for("name")]: "Fn"
                                                      },
                                                      [Symbol.for("name")]: "Fn"
                                                    })), "(!=)", Curry._1(generalize, {
                                                  TAG: 2,
                                                  _0: a$1,
                                                  _1: {
                                                    TAG: 2,
                                                    _0: a$1,
                                                    _1: Type.bool_,
                                                    [Symbol.for("name")]: "Fn"
                                                  },
                                                  [Symbol.for("name")]: "Fn"
                                                })), "(>)", {
                                          TAG: 2,
                                          _0: Type.float_,
                                          _1: {
                                            TAG: 2,
                                            _0: Type.float_,
                                            _1: Type.bool_,
                                            [Symbol.for("name")]: "Fn"
                                          },
                                          [Symbol.for("name")]: "Fn"
                                        }), "(>=)", {
                                      TAG: 2,
                                      _0: Type.float_,
                                      _1: {
                                        TAG: 2,
                                        _0: Type.float_,
                                        _1: Type.bool_,
                                        [Symbol.for("name")]: "Fn"
                                      },
                                      [Symbol.for("name")]: "Fn"
                                    }), "(<)", {
                                  TAG: 2,
                                  _0: Type.float_,
                                  _1: {
                                    TAG: 2,
                                    _0: Type.float_,
                                    _1: Type.bool_,
                                    [Symbol.for("name")]: "Fn"
                                  },
                                  [Symbol.for("name")]: "Fn"
                                }), "(<=)", {
                              TAG: 2,
                              _0: Type.float_,
                              _1: {
                                TAG: 2,
                                _0: Type.float_,
                                _1: Type.bool_,
                                [Symbol.for("name")]: "Fn"
                              },
                              [Symbol.for("name")]: "Fn"
                            }), "(+)", {
                          TAG: 2,
                          _0: Type.float_,
                          _1: {
                            TAG: 2,
                            _0: Type.float_,
                            _1: Type.float_,
                            [Symbol.for("name")]: "Fn"
                          },
                          [Symbol.for("name")]: "Fn"
                        }), "(-)", {
                      TAG: 2,
                      _0: Type.float_,
                      _1: {
                        TAG: 2,
                        _0: Type.float_,
                        _1: Type.float_,
                        [Symbol.for("name")]: "Fn"
                      },
                      [Symbol.for("name")]: "Fn"
                    }), "(*)", {
                  TAG: 2,
                  _0: Type.float_,
                  _1: {
                    TAG: 2,
                    _0: Type.float_,
                    _1: Type.float_,
                    [Symbol.for("name")]: "Fn"
                  },
                  [Symbol.for("name")]: "Fn"
                }), "(/)", {
              TAG: 2,
              _0: Type.float_,
              _1: {
                TAG: 2,
                _0: Type.float_,
                _1: Type.float_,
                [Symbol.for("name")]: "Fn"
              },
              [Symbol.for("name")]: "Fn"
            });
}

var get = Belt_MapString.get;

var set = Belt_MapString.set;

export {
  Not_found ,
  empty ,
  get ,
  set ,
  
}
/* No side effect */
