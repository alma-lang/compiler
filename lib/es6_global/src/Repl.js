// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Ast from "./Ast.js";
import * as Type from "./Type.js";
import * as Infer from "./Infer.js";
import * as Parser from "./Parser.js";
import * as Tokenizer from "./Tokenizer.js";
import * as Belt_Array from "../../../node_modules/rescript/lib/es6/belt_Array.js";
import * as Caml_js_exceptions from "../../../node_modules/rescript/lib/es6/caml_js_exceptions.js";

function run(param) {
  var _param;
  while(true) {
    var input = prompt(">");
    if (input !== undefined) {
      switch (input) {
        case "" :
            _param = undefined;
            continue ;
        case ".exit" :
            console.log("ðŸ‘‹");
            return ;
        default:
          var errors = Tokenizer.parse(input);
          if (errors.TAG === /* Ok */0) {
            var errors$1 = Parser.parse(input, errors._0);
            if (errors$1.TAG === /* Ok */0) {
              var ast = errors$1._0;
              try {
                Type.print(Infer.infer(ast));
              }
              catch (raw_exn){
                var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
                if (exn.RE_EXN_ID === Infer.$$TypeError) {
                  console.log("type error");
                } else if (exn.RE_EXN_ID === "Not_found") {
                  console.log("variable not found");
                } else {
                  throw exn;
                }
              }
              console.log(Ast.exprToString(ast.value));
            } else {
              Belt_Array.forEach(errors$1._0, (function (error) {
                      console.log(error.message);
                      
                    }));
            }
          } else {
            Belt_Array.forEach(errors._0, (function (error) {
                    console.log(error.message);
                    
                  }));
          }
          _param = undefined;
          continue ;
      }
    } else {
      console.log("ðŸ‘‹");
      return ;
    }
  };
}

export {
  run ,
  
}
/* Tokenizer Not a pure module */
