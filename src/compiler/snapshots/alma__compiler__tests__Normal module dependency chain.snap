---
source: src/compiler/mod.rs
assertion_line: 175
expression: "compile(&[r\"\nmodule Modules exposing (main)\n\nimport Modules.WeirdMath exposing (weirdAdd)\n\nmain = weirdAdd\n\n\n\nmodule Modules.Constants exposing (five)\n\n    five = 5\n\n\n\nmodule Modules.WeirdMath exposing (weirdAdd)\n\n    import Modules.Constants exposing (five)\n\n    weirdAdd = \\x y -> x * y + five\n        \"])"
---
/*

module Alma



False : ∀ ∅ . Bool

True : ∀ ∅ . Bool



add : ∀ ∅ . Float -> Float -> Float

and_ : ∀ ∅ . Bool -> Bool -> Bool

div : ∀ ∅ . Float -> Float -> Float

eq : ∀ a . a -> a -> Bool

ge : ∀ ∅ . Float -> Float -> Bool

gt : ∀ ∅ . Float -> Float -> Bool

le : ∀ ∅ . Float -> Float -> Bool

lt : ∀ ∅ . Float -> Float -> Bool

mult : ∀ ∅ . Float -> Float -> Float

ne : ∀ a . a -> a -> Bool

or_ : ∀ ∅ . Bool -> Bool -> Bool

sub : ∀ ∅ . Float -> Float -> Float


module Modules

main : ∀ ∅ . Float -> Float -> Float


module Modules.Constants

five : ∀ ∅ . Float


module Modules.WeirdMath

weirdAdd : ∀ ∅ . Float -> Float -> Float

*/


globalThis.Alma = Object.assign(globalThis.Alma ?? {}, function () {


let Alma = function () {



    // type Bool

    let True = {
        tag: "True",
    }

    let False = {
        tag: "False",
    }














    return {
        True,
        False,
        or_,
        and_,
        eq,
        ne,
        gt,
        ge,
        lt,
        le,
        add,
        sub,
        mult,
        div,
    };

}();

let Modules__Constants = function () {

    let { True, False } = Alma

    let five = 5

    return {
        five,
    };

}();

let Modules__WeirdMath = function () {

    let { True, False } = Alma
    let { five } = Modules__Constants

    let weirdAdd = function (x, y) {
        return Alma.add(Alma.mult(x, y), five)
    }

    return {
        weirdAdd,
    };

}();

let Modules = function () {

    let { True, False } = Alma
    let { weirdAdd } = Modules__WeirdMath

    let main = weirdAdd

    return {
        main,
    };

}();

return {
    Alma,
    Modules,
    Modules__Constants,
    Modules__WeirdMath,
};

}());

