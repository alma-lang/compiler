---
source: src/compiler/mod.rs
assertion_line: 274
expression: "compile(&[r#\"\nmodule Test exposing (main, Option(Some, None))\n\ntype Option a = Some a | None\n\ntype Id = Id Float\n\ntype List a = Cons a (List a) | Nil\n\ntype Pair a b = Pair a b\n\nmain =\n    let\n        Id id = Id 1\n        test = when Id 5 is\n            Id id -> id\n        test = when \"test\" is\n            \"banana\" -> id\n            \"phone\" -> id\n        test = when 5 is\n            5 -> id\n            _ -> id\n        test = when Some(Id(1)) is\n            Some (Id id) -> id\n        test = when 5 is\n            5 as a -> a\n            1 as b | 2 as b | b -> b\n            _ -> id\n        test = when Nil is\n            Cons a Nil |\n            Cons _ (Cons a Nil) |\n            Cons _ (Cons _ (Cons a Nil)) -> a\n        test = when Pair None (Some 3) is\n            Pair (Some (Some (5 as a | 7 as a) | Some (1 as a))) (Some (3 as b | b)) ->\n                True\n        test = when 5 is\n            n if n > 3 ->\n                True\n    Some id\n\n        \"#])"
---
// alma_out/Alma.ffi.js

export const or_ = (x, y) => x || y;
export const and_ = (x, y) => x && y;

export const eq = (x, y) => x === y;
export const ne = (x, y) => x !== y;

export const gt = (x, y) => x > y;
export const ge = (x, y) => x >= y;
export const lt = (x, y) => x < y;
export const le = (x, y) => x <= y;

export const add = (x, y) => x + y;
export const sub = (x, y) => x - y;
export const mult = (x, y) => x * y;
export const div = (x, y) => x / y;

export const Bool__True = true;
export const Bool__False = false;



// alma_out/Alma.js

/*

module Alma



False : ∀ ∅ . Bool

True : ∀ ∅ . Bool



add : ∀ ∅ . Float -> Float -> Float

and_ : ∀ ∅ . Bool -> Bool -> Bool

div : ∀ ∅ . Float -> Float -> Float

eq : ∀ a . a -> a -> Bool

ge : ∀ ∅ . Float -> Float -> Bool

gt : ∀ ∅ . Float -> Float -> Bool

le : ∀ ∅ . Float -> Float -> Bool

lt : ∀ ∅ . Float -> Float -> Bool

mult : ∀ ∅ . Float -> Float -> Float

ne : ∀ a . a -> a -> Bool

or_ : ∀ ∅ . Bool -> Bool -> Bool

sub : ∀ ∅ . Float -> Float -> Float

*/


import * as Alma__ffi from "./Alma.ffi.js"


// type Bool

let True = {
    __tag: "True",
}

let False = {
    __tag: "False",
}


let or_ = Alma__ffi.or_

let and_ = Alma__ffi.and_

let eq = Alma__ffi.eq

let ne = Alma__ffi.ne

let gt = Alma__ffi.gt

let ge = Alma__ffi.ge

let lt = Alma__ffi.lt

let le = Alma__ffi.le

let add = Alma__ffi.add

let sub = Alma__ffi.sub

let mult = Alma__ffi.mult

let div = Alma__ffi.div

export {
    // type Bool
    True,
    False,
    // end type Bool
    or_,
    and_,
    eq,
    ne,
    gt,
    ge,
    lt,
    le,
    add,
    sub,
    mult,
    div,
}



// alma_out/Test.js

/*

module Test

None : ∀ a . Option a

Some : ∀ a . a -> Option a

main : ∀ ∅ . Option Float

*/



import * as Alma from "./Alma.js"
import { True, False } from "./Alma.js"

// type Option

function Some(_0) {
    return {
        __tag: "Some",
        _0,
    }
}

let None = {
    __tag: "None",
    _0: null,
}

// type Id

function Id(_0) {
    return {
        __tag: "Id",
        _0,
    }
}

// type List

function Cons(_0, _1) {
    return {
        __tag: "Cons",
        _0,
        _1,
    }
}

let Nil = {
    __tag: "Nil",
    _0: null,
    _1: null,
}

// type Pair

function Pair(_0, _1) {
    return {
        __tag: "Pair",
        _0,
        _1,
    }
}

let main = function() {
    let { _0: id } = Id(1)
    let test = function () {
        let __result_0 = Id(5)
        let id
        if (__result_0.__tag === "Id" && (id = __result_0._0, true)) {
            return id
        }

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = "test"
        if (__result_0 === "banana") {
            return id
        }
        if (__result_0 === "phone") {
            return id
        }

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = 5
        if (__result_0 === 5) {
            return id
        }
        return id

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = Some(Id(1))
        let id
        if (__result_0.__tag === "Some" && __result_0._0.__tag === "Id" && (id = __result_0._0._0, true)) {
            return id
        }

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = 5
        let a, b
        if (((__result_0 === 5) ? (a = __result_0, true) : false)) {
            return a
        }
        if (((((__result_0 === 1) ? (b = __result_0, true) : false)) || (((__result_0 === 2) ? (b = __result_0, true) : false)) || ((b = __result_0, true)))) {
            return b
        }
        return id

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = Nil
        let a
        if (((__result_0.__tag === "Cons" && (a = __result_0._0, true) && __result_0._1.__tag === "Nil") || (__result_0.__tag === "Cons" && __result_0._1.__tag === "Cons" && (a = __result_0._1._0, true) && __result_0._1._1.__tag === "Nil") || (__result_0.__tag === "Cons" && __result_0._1.__tag === "Cons" && __result_0._1._1.__tag === "Cons" && (a = __result_0._1._1._0, true) && __result_0._1._1._1.__tag === "Nil"))) {
            return a
        }

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = Pair(None, Some(3))
        let a, b
        if (__result_0.__tag === "Pair" && __result_0._0.__tag === "Some" && ((__result_0._0._0.__tag === "Some" && ((((__result_0._0._0._0 === 5) ? (a = __result_0._0._0._0, true) : false)) || (((__result_0._0._0._0 === 7) ? (a = __result_0._0._0._0, true) : false)))) || (__result_0._0._0.__tag === "Some" && ((__result_0._0._0._0 === 1) ? (a = __result_0._0._0._0, true) : false))) && __result_0._1.__tag === "Some" && ((((__result_0._1._0 === 3) ? (b = __result_0._1._0, true) : false)) || ((b = __result_0._1._0, true)))) {
            return True
        }

        throw new Error("Incomplete pattern match")
    }()
    let test = function () {
        let __result_0 = 5
        let n
        if ((n = __result_0, true)) {
            if ((n > 3)) {
                return True
            }
        }

        throw new Error("Incomplete pattern match")
    }()
    return Some(id)
}()

export {
    main,
    // type Option
    Some,
    None,
    // end type Option
}




