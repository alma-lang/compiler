---
source: src/compiler/mod.rs
assertion_line: 258
expression: "compile(&[r\"\nmodule Test exposing (main)\n\nexternal test : Float -> Float -> Float\n\nmain a = test a 5\n\nmodule Test.Inner exposing (another_test)\n    external another_test : Float -> Float\n        \"])"
---
// alma_out/Test.Inner.ffi.js

// Copy from: Test.Inner.ffi.js


// alma_out/Test.Inner.js

/*

module Test.Inner

another_test : ∀ ∅ . Float -> Float

*/


import * as Test__Inner__ffi from "./Test.Inner.ffi.js"

import * as Alma from "./Alma.js"
import { True, False } from "./Alma.js"

let another_test = Test__Inner__ffi.another_test

export {
    another_test,
}



// alma_out/Alma.ffi.js

export const or_ = (x, y) => x || y;
export const and_ = (x, y) => x && y;

export const eq = (x, y) => x === y;
export const ne = (x, y) => x !== y;

export const gt = (x, y) => x > y;
export const ge = (x, y) => x >= y;
export const lt = (x, y) => x < y;
export const le = (x, y) => x <= y;

export const add = (x, y) => x + y;
export const sub = (x, y) => x - y;
export const mult = (x, y) => x * y;
export const div = (x, y) => x / y;

export const Bool__True = true;
export const Bool__False = false;



// alma_out/Alma.js

/*

module Alma



False : ∀ ∅ . Bool

True : ∀ ∅ . Bool



add : ∀ ∅ . Float -> Float -> Float

and_ : ∀ ∅ . Bool -> Bool -> Bool

div : ∀ ∅ . Float -> Float -> Float

eq : ∀ a . a -> a -> Bool

ge : ∀ ∅ . Float -> Float -> Bool

gt : ∀ ∅ . Float -> Float -> Bool

le : ∀ ∅ . Float -> Float -> Bool

lt : ∀ ∅ . Float -> Float -> Bool

mult : ∀ ∅ . Float -> Float -> Float

ne : ∀ a . a -> a -> Bool

or_ : ∀ ∅ . Bool -> Bool -> Bool

sub : ∀ ∅ . Float -> Float -> Float

*/


import * as Alma__ffi from "./Alma.ffi.js"


// type Bool

let True = Alma__ffi.Bool__True

let False = Alma__ffi.Bool__False


let or_ = Alma__ffi.or_

let and_ = Alma__ffi.and_

let eq = Alma__ffi.eq

let ne = Alma__ffi.ne

let gt = Alma__ffi.gt

let ge = Alma__ffi.ge

let lt = Alma__ffi.lt

let le = Alma__ffi.le

let add = Alma__ffi.add

let sub = Alma__ffi.sub

let mult = Alma__ffi.mult

let div = Alma__ffi.div

export {
    // type Bool
    True,
    False,
    or_,
    and_,
    eq,
    ne,
    gt,
    ge,
    lt,
    le,
    add,
    sub,
    mult,
    div,
}



// alma_out/Test.ffi.js

// Copy from: Test.ffi.js


// alma_out/Test.js

/*

module Test

main : ∀ ∅ . Float -> Float

*/


import * as Test__ffi from "./Test.ffi.js"

import * as Alma from "./Alma.js"
import { True, False } from "./Alma.js"

let test = Test__ffi.test

function main(a) {
    return test(a, 5)
}

export {
    main,
}




