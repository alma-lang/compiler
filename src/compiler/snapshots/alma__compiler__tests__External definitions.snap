---
source: src/compiler/mod.rs
assertion_line: 253
expression: "compile(&[r\"\nmodule Test exposing (main)\n\nexternal test : Float -> Float -> Float\n\nmain a = test a 5\n\nmodule Test.Inner exposing (another_test)\n    external another_test : Float -> Float\n        \"])"
---
// alma_out/Test.Inner.js

/*

module Test.Inner

another_test : ∀ ∅ . Float -> Float

*/


import * as Test__Inner__ffi from "alma_out/Test.Inner.ffi.js"


import * as Alma from "alma_out/Alma.js"
import { True, False } from "alma_out/Alma.js"

let another_test = Test__Inner__ffi.another_test

export {
    another_test,
}



// alma_out/Alma.js

/*

module Alma



False : ∀ ∅ . Bool

True : ∀ ∅ . Bool



add : ∀ ∅ . Float -> Float -> Float

and_ : ∀ ∅ . Bool -> Bool -> Bool

div : ∀ ∅ . Float -> Float -> Float

eq : ∀ a . a -> a -> Bool

ge : ∀ ∅ . Float -> Float -> Bool

gt : ∀ ∅ . Float -> Float -> Bool

le : ∀ ∅ . Float -> Float -> Bool

lt : ∀ ∅ . Float -> Float -> Bool

mult : ∀ ∅ . Float -> Float -> Float

ne : ∀ a . a -> a -> Bool

or_ : ∀ ∅ . Bool -> Bool -> Bool

sub : ∀ ∅ . Float -> Float -> Float

*/





// type Bool

let True = {
    tag: "True",
}

let False = {
    tag: "False",
}


let or_ = new Error("Unimplemented")

let and_ = new Error("Unimplemented")

let eq = new Error("Unimplemented")

let ne = new Error("Unimplemented")

let gt = new Error("Unimplemented")

let ge = new Error("Unimplemented")

let lt = new Error("Unimplemented")

let le = new Error("Unimplemented")

let add = new Error("Unimplemented")

let sub = new Error("Unimplemented")

let mult = new Error("Unimplemented")

let div = new Error("Unimplemented")

export {
    // type Bool
    True,
    False,
    or_,
    and_,
    eq,
    ne,
    gt,
    ge,
    lt,
    le,
    add,
    sub,
    mult,
    div,
}



// alma_out/Test.js

/*

module Test

main : ∀ ∅ . Float -> Float

*/


import * as Test__ffi from "alma_out/Test.ffi.js"


import * as Alma from "alma_out/Alma.js"
import { True, False } from "alma_out/Alma.js"

let test = Test__ffi.test

function main(a) {
    return test(a, 5)
}

export {
    main,
}




