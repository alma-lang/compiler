---
source: src/parser.rs
assertion_line: 2601
expression: "parse(\"\\\nmodule Parent\n\nmodule Parent.Test1\n  a = 1\n\n  module Parent.Test1.Test1Test\n    b = 1\n\nmodule Parent.Test2\n    c = 5\n    \")"
---
Input:

module Parent

module Parent.Test1
  a = 1

  module Parent.Test1.Test1Test
    b = 1

module Parent.Test2
    c = 5
    

Result:

(
    Module {
        name: ModuleName {
            parts: [
                CapitalizedIdentifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        0,
                    ),
                },
            ],
            full_name: SymbolU32 {
                value: 1,
            },
        },
        exports: [],
        imports: [],
        definitions: [],
        type_definitions: [],
    },
    [
        Module {
            name: ModuleName {
                parts: [
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 1,
                        },
                        span: Index(
                            6,
                        ),
                    },
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 2,
                        },
                        span: Index(
                            7,
                        ),
                    },
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 5,
                        },
                        span: Index(
                            8,
                        ),
                    },
                ],
                full_name: SymbolU32 {
                    value: 11,
                },
            },
            exports: [],
            imports: [],
            definitions: [
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                9,
                            ),
                            typ: Identifier(
                                Identifier {
                                    name: SymbolU32 {
                                        value: 6,
                                    },
                                    span: Index(
                                        9,
                                    ),
                                },
                            ),
                        },
                        Index(
                            1,
                        ),
                    ),
                ),
            ],
            type_definitions: [],
        },
        Module {
            name: ModuleName {
                parts: [
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 1,
                        },
                        span: Index(
                            1,
                        ),
                    },
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 2,
                        },
                        span: Index(
                            2,
                        ),
                    },
                ],
                full_name: SymbolU32 {
                    value: 10,
                },
            },
            exports: [],
            imports: [],
            definitions: [
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                3,
                            ),
                            typ: Identifier(
                                Identifier {
                                    name: SymbolU32 {
                                        value: 3,
                                    },
                                    span: Index(
                                        3,
                                    ),
                                },
                            ),
                        },
                        Index(
                            0,
                        ),
                    ),
                ),
            ],
            type_definitions: [],
        },
        Module {
            name: ModuleName {
                parts: [
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 1,
                        },
                        span: Index(
                            12,
                        ),
                    },
                    CapitalizedIdentifier {
                        name: SymbolU32 {
                            value: 7,
                        },
                        span: Index(
                            13,
                        ),
                    },
                ],
                full_name: SymbolU32 {
                    value: 12,
                },
            },
            exports: [],
            imports: [],
            definitions: [
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                14,
                            ),
                            typ: Identifier(
                                Identifier {
                                    name: SymbolU32 {
                                        value: 8,
                                    },
                                    span: Index(
                                        14,
                                    ),
                                },
                            ),
                        },
                        Index(
                            2,
                        ),
                    ),
                ),
            ],
            type_definitions: [],
        },
    ],
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            5,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Float(
            1.0,
        ),
    },
    Index(
        1,
    ): Expression {
        span: Index(
            11,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Float(
            1.0,
        ),
    },
    Index(
        2,
    ): Expression {
        span: Index(
            16,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Float(
            5.0,
        ),
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            6,
        ),
        end: Index(
            6,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            6,
        ),
        end: Index(
            6,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            8,
        ),
        end: Index(
            8,
        ),
    },
    Index(
        6,
    ): Span {
        start: Index(
            10,
        ),
        end: Index(
            10,
        ),
    },
    Index(
        7,
    ): Span {
        start: Index(
            12,
        ),
        end: Index(
            12,
        ),
    },
    Index(
        8,
    ): Span {
        start: Index(
            14,
        ),
        end: Index(
            14,
        ),
    },
    Index(
        9,
    ): Span {
        start: Index(
            15,
        ),
        end: Index(
            15,
        ),
    },
    Index(
        10,
    ): Span {
        start: Index(
            15,
        ),
        end: Index(
            15,
        ),
    },
    Index(
        11,
    ): Span {
        start: Index(
            17,
        ),
        end: Index(
            17,
        ),
    },
    Index(
        12,
    ): Span {
        start: Index(
            19,
        ),
        end: Index(
            19,
        ),
    },
    Index(
        13,
    ): Span {
        start: Index(
            21,
        ),
        end: Index(
            21,
        ),
    },
    Index(
        14,
    ): Span {
        start: Index(
            22,
        ),
        end: Index(
            22,
        ),
    },
    Index(
        15,
    ): Span {
        start: Index(
            22,
        ),
        end: Index(
            22,
        ),
    },
    Index(
        16,
    ): Span {
        start: Index(
            24,
        ),
        end: Index(
            24,
        ),
    },
}
