---
source: src/parser.rs
assertion_line: 2242
expression: "parse(\"if True then if False then 1 else 3 else 2\")"
---
Input:

if True then if False then 1 else 3 else 2

Result:

Node {
    start: Idx(
        0,
    ),
    end: Idx(
        10,
    ),
    value: Expression_ {
        typ: RefCell {
            value: None,
        },
        expr: If(
            Node {
                start: Idx(
                    1,
                ),
                end: Idx(
                    1,
                ),
                value: Expression_ {
                    typ: RefCell {
                        value: None,
                    },
                    expr: Bool(
                        true,
                    ),
                },
            },
            Node {
                start: Idx(
                    3,
                ),
                end: Idx(
                    8,
                ),
                value: Expression_ {
                    typ: RefCell {
                        value: None,
                    },
                    expr: If(
                        Node {
                            start: Idx(
                                4,
                            ),
                            end: Idx(
                                4,
                            ),
                            value: Expression_ {
                                typ: RefCell {
                                    value: None,
                                },
                                expr: Bool(
                                    false,
                                ),
                            },
                        },
                        Node {
                            start: Idx(
                                6,
                            ),
                            end: Idx(
                                6,
                            ),
                            value: Expression_ {
                                typ: RefCell {
                                    value: None,
                                },
                                expr: Float(
                                    1.0,
                                ),
                            },
                        },
                        Node {
                            start: Idx(
                                8,
                            ),
                            end: Idx(
                                8,
                            ),
                            value: Expression_ {
                                typ: RefCell {
                                    value: None,
                                },
                                expr: Float(
                                    3.0,
                                ),
                            },
                        },
                    ),
                },
            },
            Node {
                start: Idx(
                    10,
                ),
                end: Idx(
                    10,
                ),
                value: Expression_ {
                    typ: RefCell {
                        value: None,
                    },
                    expr: Float(
                        2.0,
                    ),
                },
            },
        ),
    },
}
