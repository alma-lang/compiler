---
source: src/parser.rs
assertion_line: 2567
expression: "parse(\"\\\nlet add x y = x + y\nadd 5\")"
---
Input:

let add x y = x + y
add 5

Result:

Index(
    7,
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            7,
        ),
        expr: Identifier {
            module: Some(
                ModuleName {
                    parts: [
                        CapitalizedIdentifier {
                            name: SymbolU32 {
                                value: 5,
                            },
                            span: Index(
                                9,
                            ),
                        },
                    ],
                    full_name: SymbolU32 {
                        value: 5,
                    },
                },
            ),
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        7,
                    ),
                },
            ),
        },
    },
    Index(
        1,
    ): Expression {
        span: Index(
            6,
        ),
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 2,
                    },
                    span: Index(
                        6,
                    ),
                },
            ),
        },
    },
    Index(
        2,
    ): Expression {
        span: Index(
            8,
        ),
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 3,
                    },
                    span: Index(
                        8,
                    ),
                },
            ),
        },
    },
    Index(
        3,
    ): Expression {
        span: Index(
            10,
        ),
        expr: Binary {
            expression: Index(
                0,
            ),
            op: Binop {
                typ: Addition,
                precedence: 14,
                associativity: Ltr,
            },
            arguments: [
                Index(
                    1,
                ),
                Index(
                    2,
                ),
            ],
        },
    },
    Index(
        4,
    ): Expression {
        span: Index(
            11,
        ),
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        11,
                    ),
                },
            ),
        },
    },
    Index(
        5,
    ): Expression {
        span: Index(
            12,
        ),
        expr: Float(
            5.0,
        ),
    },
    Index(
        6,
    ): Expression {
        span: Index(
            13,
        ),
        expr: FnCall {
            function: Index(
                4,
            ),
            arguments: [
                Index(
                    5,
                ),
            ],
        },
    },
    Index(
        7,
    ): Expression {
        span: Index(
            14,
        ),
        expr: Let {
            definitions: [
                Untyped(
                    Lambda(
                        Identifier {
                            name: SymbolU32 {
                                value: 1,
                            },
                            span: Index(
                                0,
                            ),
                        },
                        Lambda {
                            parameters: [
                                Pattern {
                                    span: Index(
                                        3,
                                    ),
                                    typ: Identifier(
                                        Identifier {
                                            name: SymbolU32 {
                                                value: 2,
                                            },
                                            span: Index(
                                                2,
                                            ),
                                        },
                                    ),
                                },
                                Pattern {
                                    span: Index(
                                        5,
                                    ),
                                    typ: Identifier(
                                        Identifier {
                                            name: SymbolU32 {
                                                value: 3,
                                            },
                                            span: Index(
                                                4,
                                            ),
                                        },
                                    ),
                                },
                            ],
                            body: Index(
                                3,
                            ),
                        },
                    ),
                ),
            ],
            body: Index(
                6,
            ),
        },
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        6,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        7,
    ): Span {
        start: Index(
            6,
        ),
        end: Index(
            6,
        ),
    },
    Index(
        8,
    ): Span {
        start: Index(
            7,
        ),
        end: Index(
            7,
        ),
    },
    Index(
        9,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            0,
        ),
    },
    Index(
        10,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            7,
        ),
    },
    Index(
        11,
    ): Span {
        start: Index(
            8,
        ),
        end: Index(
            8,
        ),
    },
    Index(
        12,
    ): Span {
        start: Index(
            9,
        ),
        end: Index(
            9,
        ),
    },
    Index(
        13,
    ): Span {
        start: Index(
            8,
        ),
        end: Index(
            9,
        ),
    },
    Index(
        14,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            9,
        ),
    },
}
