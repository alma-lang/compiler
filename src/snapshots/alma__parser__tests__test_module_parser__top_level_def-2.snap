---
source: src/parser.rs
assertion_line: 2519
expression: "parse(\"\\\nmodule Test\n\na = 1\n\nb = True\")"
---
Input:

module Test

a = 1

b = True

Result:

(
    Module {
        name: ModuleName {
            parts: [
                CapitalizedIdentifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        0,
                    ),
                },
            ],
            full_name: SymbolU32 {
                value: 1,
            },
        },
        exports: [],
        imports: [],
        definitions: [
            Untyped(
                Pattern(
                    Pattern {
                        span: Index(
                            1,
                        ),
                        typ: Identifier(
                            Identifier {
                                name: SymbolU32 {
                                    value: 2,
                                },
                                span: Index(
                                    1,
                                ),
                            },
                        ),
                    },
                    Index(
                        0,
                    ),
                ),
            ),
            Untyped(
                Pattern(
                    Pattern {
                        span: Index(
                            4,
                        ),
                        typ: Identifier(
                            Identifier {
                                name: SymbolU32 {
                                    value: 4,
                                },
                                span: Index(
                                    4,
                                ),
                            },
                        ),
                    },
                    Index(
                        1,
                    ),
                ),
            ),
        ],
        type_definitions: [],
    },
    [],
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            3,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Float(
            1.0,
        ),
    },
    Index(
        1,
    ): Expression {
        span: Index(
            6,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Bool(
            true,
        ),
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            4,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        6,
    ): Span {
        start: Index(
            7,
        ),
        end: Index(
            7,
        ),
    },
}
