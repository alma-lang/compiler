---
source: src/parser.rs
assertion_line: 2435
expression: "parse(\"1 == 2 / 3\")"
---
Input:

1 == 2 / 3

Result:

Index(
    6,
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            3,
        ),
        expr: Identifier {
            module: Some(
                ModuleName {
                    parts: [
                        CapitalizedIdentifier {
                            name: SymbolU32 {
                                value: 4,
                            },
                            span: Index(
                                5,
                            ),
                        },
                    ],
                    full_name: SymbolU32 {
                        value: 4,
                    },
                },
            ),
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 5,
                    },
                    span: Index(
                        3,
                    ),
                },
            ),
        },
    },
    Index(
        1,
    ): Expression {
        span: Index(
            2,
        ),
        expr: Float(
            2.0,
        ),
    },
    Index(
        2,
    ): Expression {
        span: Index(
            4,
        ),
        expr: Float(
            3.0,
        ),
    },
    Index(
        3,
    ): Expression {
        span: Index(
            1,
        ),
        expr: Identifier {
            module: Some(
                ModuleName {
                    parts: [
                        CapitalizedIdentifier {
                            name: SymbolU32 {
                                value: 4,
                            },
                            span: Index(
                                7,
                            ),
                        },
                    ],
                    full_name: SymbolU32 {
                        value: 4,
                    },
                },
            ),
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 6,
                    },
                    span: Index(
                        1,
                    ),
                },
            ),
        },
    },
    Index(
        4,
    ): Expression {
        span: Index(
            0,
        ),
        expr: Float(
            1.0,
        ),
    },
    Index(
        5,
    ): Expression {
        span: Index(
            6,
        ),
        expr: Binary {
            expression: Index(
                0,
            ),
            op: Binop {
                typ: Division,
                precedence: 15,
                associativity: Ltr,
            },
            arguments: [
                Index(
                    1,
                ),
                Index(
                    2,
                ),
            ],
        },
    },
    Index(
        6,
    ): Expression {
        span: Index(
            8,
        ),
        expr: Binary {
            expression: Index(
                3,
            ),
            op: Binop {
                typ: Equal,
                precedence: 11,
                associativity: Ltr,
            },
            arguments: [
                Index(
                    4,
                ),
                Index(
                    5,
                ),
            ],
        },
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            0,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            4,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            0,
        ),
    },
    Index(
        6,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        7,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            0,
        ),
    },
    Index(
        8,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            4,
        ),
    },
}
