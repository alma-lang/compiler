---
source: src/parser.rs
assertion_line: 2219
expression: "parse(\"1 + 2 / 3\")"
---
Input:

1 + 2 / 3

Result:

Node {
    start: Idx(
        0,
    ),
    end: Idx(
        4,
    ),
    value: Expression_ {
        typ: RefCell {
            value: None,
        },
        expr: Binary(
            Node {
                start: Idx(
                    1,
                ),
                end: Idx(
                    1,
                ),
                value: Expression_ {
                    typ: RefCell {
                        value: None,
                    },
                    expr: Identifier(
                        None,
                        Identifier(
                            Node {
                                start: Idx(
                                    1,
                                ),
                                end: Idx(
                                    1,
                                ),
                                value: Identifier_ {
                                    name: SymbolU32 {
                                        value: 5,
                                    },
                                },
                            },
                        ),
                    ),
                },
            },
            Node {
                start: Idx(
                    1,
                ),
                end: Idx(
                    1,
                ),
                value: Binop_ {
                    typ: Addition,
                    precedence: 14,
                    associativity: Ltr,
                },
            },
            [
                Node {
                    start: Idx(
                        0,
                    ),
                    end: Idx(
                        0,
                    ),
                    value: Expression_ {
                        typ: RefCell {
                            value: None,
                        },
                        expr: Float(
                            1.0,
                        ),
                    },
                },
                Node {
                    start: Idx(
                        2,
                    ),
                    end: Idx(
                        4,
                    ),
                    value: Expression_ {
                        typ: RefCell {
                            value: None,
                        },
                        expr: Binary(
                            Node {
                                start: Idx(
                                    3,
                                ),
                                end: Idx(
                                    3,
                                ),
                                value: Expression_ {
                                    typ: RefCell {
                                        value: None,
                                    },
                                    expr: Identifier(
                                        None,
                                        Identifier(
                                            Node {
                                                start: Idx(
                                                    3,
                                                ),
                                                end: Idx(
                                                    3,
                                                ),
                                                value: Identifier_ {
                                                    name: SymbolU32 {
                                                        value: 4,
                                                    },
                                                },
                                            },
                                        ),
                                    ),
                                },
                            },
                            Node {
                                start: Idx(
                                    3,
                                ),
                                end: Idx(
                                    3,
                                ),
                                value: Binop_ {
                                    typ: Division,
                                    precedence: 15,
                                    associativity: Ltr,
                                },
                            },
                            [
                                Node {
                                    start: Idx(
                                        2,
                                    ),
                                    end: Idx(
                                        2,
                                    ),
                                    value: Expression_ {
                                        typ: RefCell {
                                            value: None,
                                        },
                                        expr: Float(
                                            2.0,
                                        ),
                                    },
                                },
                                Node {
                                    start: Idx(
                                        4,
                                    ),
                                    end: Idx(
                                        4,
                                    ),
                                    value: Expression_ {
                                        typ: RefCell {
                                            value: None,
                                        },
                                        expr: Float(
                                            3.0,
                                        ),
                                    },
                                },
                            ],
                        ),
                    },
                },
            ],
        ),
    },
}
