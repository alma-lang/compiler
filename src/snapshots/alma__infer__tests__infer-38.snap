---
source: src/infer.rs
expression: "infer(\"\\\nmodule Test exposing (main)\n\ntype Math num =\n    { add : num -> num -> num\n    , sub : num -> num -> num\n    }\n\ntype M num = M (Math num)\n\nmain = M { add: \\\\x y -> x + y, sub: \\\\x -> x }\n\")"

---
Input:

module Test exposing (main)

type Math num =
    { add : num -> num -> num
    , sub : num -> num -> num
    }

type M num = M (Math num)

main = M { add: \x y -> x + y, sub: \x -> x }


---
Output:

[10:9]

Type mismatch:  { add : Float -> Float -> Float, sub : a -> a }  ≠  Math Float (alias of { add : Float -> Float -> Float, sub : Float -> Float -> Float })

Expected

   8│  type M num = M (Math num)
   9│  
  10│  main = M { add: \x y -> x + y, sub: \x -> x }
    │           ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑

to be

Math Float (alias of { add : Float -> Float -> Float, sub : Float -> Float -> Float })

but seems to be

{ add : Float -> Float -> Float, sub : a -> a }
