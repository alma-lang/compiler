---
source: src/parser.rs
assertion_line: 2730
expression: "parse(\"\\\nmodule Test\n\nincr n = n + 1\n\")"
---
Input:

module Test

incr n = n + 1


Result:

(
    Module {
        name: ModuleName {
            parts: [
                CapitalizedIdentifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        0,
                    ),
                },
            ],
            full_name: SymbolU32 {
                value: 1,
            },
        },
        exports: [],
        imports: [],
        definitions: [
            Untyped(
                Lambda(
                    Identifier {
                        name: SymbolU32 {
                            value: 2,
                        },
                        span: Index(
                            1,
                        ),
                    },
                    Lambda {
                        parameters: [
                            Pattern {
                                span: Index(
                                    4,
                                ),
                                typ: Identifier(
                                    Identifier {
                                        name: SymbolU32 {
                                            value: 3,
                                        },
                                        span: Index(
                                            3,
                                        ),
                                    },
                                ),
                            },
                        ],
                        body: Index(
                            3,
                        ),
                    },
                ),
            ),
        ],
        type_definitions: [],
    },
    [],
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            6,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 5,
                    },
                    span: Index(
                        6,
                    ),
                },
            ),
        },
    },
    Index(
        1,
    ): Expression {
        span: Index(
            5,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 3,
                    },
                    span: Index(
                        5,
                    ),
                },
            ),
        },
    },
    Index(
        2,
    ): Expression {
        span: Index(
            7,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Float(
            1.0,
        ),
    },
    Index(
        3,
    ): Expression {
        span: Index(
            8,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Binary {
            expression: Index(
                0,
            ),
            op: Binop {
                typ: Addition,
                precedence: 14,
                associativity: Ltr,
            },
            arguments: [
                Index(
                    1,
                ),
                Index(
                    2,
                ),
            ],
        },
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            2,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        6,
    ): Span {
        start: Index(
            6,
        ),
        end: Index(
            6,
        ),
    },
    Index(
        7,
    ): Span {
        start: Index(
            7,
        ),
        end: Index(
            7,
        ),
    },
    Index(
        8,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            7,
        ),
    },
}
