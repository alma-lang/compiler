---
source: src/infer.rs
assertion_line: 3592
expression: "infer(\"\\\nmodule Test exposing (main)\n\nimport Test.Types as Types\n\nmodule Test.Types exposing (Test(Test))\n    type Test a = Test a\n\nTypes.Test a = Types.Test 1\n\ntest = when Types.Test 2 is\n    Types.Test a -> a\n\nmain = a + test\n\")"
---
Input:

module Test exposing (main)

import Test.Types as Types

module Test.Types exposing (Test(Test))
    type Test a = Test a

Types.Test a = Types.Test 1

test = when Types.Test 2 is
    Types.Test a -> a

main = a + test


---
Output:

module Alma



False : ∀ ∅ . Bool

True : ∀ ∅ . Bool



add : ∀ ∅ . Float -> Float -> Float

and_ : ∀ ∅ . Bool -> Bool -> Bool

div : ∀ ∅ . Float -> Float -> Float

eq : ∀ a . a -> a -> Bool

ge : ∀ ∅ . Float -> Float -> Bool

gt : ∀ ∅ . Float -> Float -> Bool

le : ∀ ∅ . Float -> Float -> Bool

lt : ∀ ∅ . Float -> Float -> Bool

mult : ∀ ∅ . Float -> Float -> Float

ne : ∀ a . a -> a -> Bool

or_ : ∀ ∅ . Bool -> Bool -> Bool

sub : ∀ ∅ . Float -> Float -> Float


module Test

main : ∀ ∅ . Float


module Test.Types

Test : ∀ a . a -> Test a


