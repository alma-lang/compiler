---
source: src/parser.rs
assertion_line: 2674
expression: "parse(\"\\\nlet\n  IAmNotCamelCase = 1\nin\nIAmNotCamelCase\n\")"
---
Input:

let
  IAmNotCamelCase = 1
in
IAmNotCamelCase


Result:

Index(
    2,
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            2,
        ),
        expr: Float(
            1.0,
        ),
    },
    Index(
        1,
    ): Expression {
        span: Index(
            4,
        ),
        expr: Identifier {
            module: None,
            identifier: CapitalizedIdentifier(
                CapitalizedIdentifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        3,
                    ),
                },
            ),
        },
    },
    Index(
        2,
    ): Expression {
        span: Index(
            5,
        ),
        expr: Let {
            definitions: [
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                1,
                            ),
                            typ: Type(
                                CapitalizedIdentifier {
                                    name: SymbolU32 {
                                        value: 1,
                                    },
                                    span: Index(
                                        0,
                                    ),
                                },
                                [],
                            ),
                        },
                        Index(
                            0,
                        ),
                    ),
                ),
            ],
            body: Index(
                1,
            ),
        },
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            2,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            5,
        ),
    },
}
