---
source: src/parser.rs
assertion_line: 2526
expression: "parse(\"\\\nlet\n  x = a\n    x\n b = 5\nin\nx\")"
---
Input:

let
  x = a
    x
 b = 5
in
x

Result:

Index(
    5,
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            2,
        ),
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 2,
                    },
                    span: Index(
                        2,
                    ),
                },
            ),
        },
    },
    Index(
        1,
    ): Expression {
        span: Index(
            3,
        ),
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        3,
                    ),
                },
            ),
        },
    },
    Index(
        2,
    ): Expression {
        span: Index(
            4,
        ),
        expr: FnCall {
            function: Index(
                0,
            ),
            arguments: [
                Index(
                    1,
                ),
            ],
        },
    },
    Index(
        3,
    ): Expression {
        span: Index(
            7,
        ),
        expr: Float(
            5.0,
        ),
    },
    Index(
        4,
    ): Expression {
        span: Index(
            8,
        ),
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        8,
                    ),
                },
            ),
        },
    },
    Index(
        5,
    ): Expression {
        span: Index(
            9,
        ),
        expr: Let {
            definitions: [
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                0,
                            ),
                            typ: Identifier(
                                Identifier {
                                    name: SymbolU32 {
                                        value: 1,
                                    },
                                    span: Index(
                                        0,
                                    ),
                                },
                            ),
                        },
                        Index(
                            2,
                        ),
                    ),
                ),
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                5,
                            ),
                            typ: Identifier(
                                Identifier {
                                    name: SymbolU32 {
                                        value: 3,
                                    },
                                    span: Index(
                                        5,
                                    ),
                                },
                            ),
                        },
                        Index(
                            3,
                        ),
                    ),
                ),
            ],
            body: Index(
                4,
            ),
        },
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            4,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        6,
    ): Span {
        start: Index(
            5,
        ),
        end: Index(
            5,
        ),
    },
    Index(
        7,
    ): Span {
        start: Index(
            7,
        ),
        end: Index(
            7,
        ),
    },
    Index(
        8,
    ): Span {
        start: Index(
            9,
        ),
        end: Index(
            9,
        ),
    },
    Index(
        9,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            9,
        ),
    },
}
