---
source: src/parser.rs
assertion_line: 2401
expression: "parse(\"let _ = a x in x\")"
---
Input:

let _ = a x in x

Result:

Index(
    4,
)

{
    Index(
        0,
    ): Expression {
        span: Index(
            1,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 1,
                    },
                    span: Index(
                        1,
                    ),
                },
            ),
        },
    },
    Index(
        1,
    ): Expression {
        span: Index(
            2,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 2,
                    },
                    span: Index(
                        2,
                    ),
                },
            ),
        },
    },
    Index(
        2,
    ): Expression {
        span: Index(
            3,
        ),
        typ: RefCell {
            value: None,
        },
        expr: FnCall {
            function: Index(
                0,
            ),
            arguments: [
                Index(
                    1,
                ),
            ],
        },
    },
    Index(
        3,
    ): Expression {
        span: Index(
            4,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Identifier {
            module: None,
            identifier: Identifier(
                Identifier {
                    name: SymbolU32 {
                        value: 2,
                    },
                    span: Index(
                        4,
                    ),
                },
            ),
        },
    },
    Index(
        4,
    ): Expression {
        span: Index(
            5,
        ),
        typ: RefCell {
            value: None,
        },
        expr: Let {
            definitions: [
                Untyped(
                    Pattern(
                        Pattern {
                            span: Index(
                                0,
                            ),
                            typ: Hole,
                        },
                        Index(
                            2,
                        ),
                    ),
                ),
            ],
            body: Index(
                3,
            ),
        },
    },
}

{
    Index(
        0,
    ): Span {
        start: Index(
            1,
        ),
        end: Index(
            1,
        ),
    },
    Index(
        1,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            3,
        ),
    },
    Index(
        2,
    ): Span {
        start: Index(
            4,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        3,
    ): Span {
        start: Index(
            3,
        ),
        end: Index(
            4,
        ),
    },
    Index(
        4,
    ): Span {
        start: Index(
            6,
        ),
        end: Index(
            6,
        ),
    },
    Index(
        5,
    ): Span {
        start: Index(
            0,
        ),
        end: Index(
            6,
        ),
    },
}
